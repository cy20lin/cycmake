## test/cmake/test_api.cmake
##
## Copyright (c) 2017 ChienYu Lin
##
## Author: ChienYu Lin <cy20lin@gmail.com>
## License: MIT
##

macro(test name)
  message("[test] ${name}")
  set(CHECK_PASSED_COUNT 0)
  set(CHECK_FAILED_COUNT 0)
  set(TESTCASE_PASSED_COUNT 0)
  set(TESTCASE_FAILED_COUNT 0)
  set(TEST_NAME "${name}")
  set(TEST_BINARY_DIR "${TEST_CACHE_DIR}/${name}")
endmacro()

macro(endtest)
  if("${TESTCASE_FAILED_COUNT}" EQUAL 0)
    set(TEST_RESULT passed)
  else()
    set(TEST_RESULT failed)
  endif()
  message("[endtest] ${TEST_RESULT}; testcase: ${TESTCASE_FAILED_COUNT} failed, ${TESTCASE_PASSED_COUNT} passed; check: ${CHECK_FAILED_COUNT} failed, ${CHECK_PASSED_COUNT} passed")
endmacro()

macro(testcase name)
  math(EXPR TESTCASE_COUNT "0${TESTCASE_COUNT} + 1")
  set(TESTCASE_CHECK_COUNT 0)
  set(TESTCASE_BINARY_DIR "${TEST_BINARY_DIR}/${name}")
  set(TEST_EXPECT_LOG_PATH "${TESTCASE_BINARY_DIR}/expect.log")
  set(TEST_ACTUAL_LOG_PATH "${TESTCASE_BINARY_DIR}/actual.log")
  file(MAKE_DIRECTORY "${TESTCASE_BINARY_DIR}")
  set(TESTCASE_CHECK_PASSED_COUNT 0)
  set(TESTCASE_CHECK_FAILED_COUNT 0)
  set(TESTCASE_NAME "${name}")
  remove_log()
  message("  [testcase][${TESTCASE_COUNT}] ${name}")
endmacro()

macro(endtestcase)
  if("${TESTCASE_CHECK_FAILED_COUNT}" EQUAL 0)
    set(TESTCASE_RESULT passed)
    math(EXPR TESTCASE_PASSED_COUNT "${TESTCASE_PASSED_COUNT} + 1")
  else()
    set(TESTCASE_RESULT failed)
    math(EXPR TESTCASE_FAILED_COUNT "${TESTCASE_FAILED_COUNT} + 1")
  endif()
  file(REMOVE_RECURSE "${TEST_EXPECT_LOG_PATH}" expect_log)
  file(REMOVE_RECURSE "${TEST_ACTUAL_LOG_PATH}" acutal_log)
  message("  [endtestcase][${TESTCASE_COUNT}] ${TESTCASE_RESULT}; check: ${TESTCASE_CHECK_FAILED_COUNT} failed, ${TESTCASE_CHECK_PASSED_COUNT} passed")
endmacro()

function(remove_log)
  file(REMOVE "${TEST_ACTUAL_LOG_PATH}")
  file(REMOVE "${TEST_EXPECT_LOG_PATH}")
endfunction()

function(reset_log)
  file(WRITE "${TEST_ACTUAL_LOG_PATH}" "")
  file(WRITE "${TEST_EXPECT_LOG_PATH}" "")
endfunction()

function(monitor command)
  # message("${PROJECT_SOURCE_DIR}/test/cmake/monitor.cmake.in")
  configure_file(
    "${PROJECT_SOURCE_DIR}/test/cmake/monitor.cmake.in"
    "${TEST_CACHE_DIR}/cmake/monitor/${command}.cmake"
    @ONLY)
  include("${TEST_CACHE_DIR}/cmake/monitor/${command}.cmake")
endfunction()

function(log_actual msg)
  file(APPEND "${TEST_ACTUAL_LOG_PATH}" "${msg}\n")
  # message("      [log_actual] ${msg}")
endfunction()

function(log_expect msg)
  file(APPEND "${TEST_EXPECT_LOG_PATH}" "${msg}\n")
  # message("      [log_expect] ${msg}")
endfunction()

function(log_expect_command command)
  log_expect("command=${command}")
  math(EXPR argc "0${ARGC} - 1")
  log_expect("ARGC=${argc}")
  foreach(i RANGE 1 "${argc}")
    math(EXPR ii "${i} - 1")
    log_expect("ARGV${ii}=${ARGV${i}}")
  endforeach()
  log_expect("")
endfunction()

macro(check__common description)
  math(EXPR TESTCASE_CHECK_COUNT "0${TESTCASE_CHECK_COUNT} + 1")
  math(EXPR CHECK_COUNT "0${CHECK_COUNT} + 1")
  # set(CHECK_BINARY_DIR "${TESTCASE_BINARY_DIR}/")
  message("    [check][${TESTCASE_CHECK_COUNT}] ${description}")
  unset(expect_log)
  unset(actual_log)
  file(READ "${TEST_EXPECT_LOG_PATH}" expect_log)
  file(READ "${TEST_ACTUAL_LOG_PATH}" actual_log)
  string(COMPARE EQUAL "${expect_log}" "${actual_log}" CHECK_RESULT)
endmacro()

macro(check__info failing_condition)
  if("${CHECK_RESULT}" EQUAL "${failing_condition}")
    math(EXPR TESTCASE_CHECK_FAILED_COUNT "${TESTCASE_CHECK_FAILED_COUNT} + 1")
    math(EXPR CHECK_FAILED_COUNT "${CHECK_FAILED_COUNT} + 1")
    message("    [endcheck][${TESTCASE_CHECK_COUNT}] failed")
  else()
    math(EXPR TESTCASE_CHECK_PASSED_COUNT "${TESTCASE_CHECK_PASSED_COUNT} + 1")
    math(EXPR CHECK_PASSED_COUNT "${CHECK_PASSED_COUNT} + 1")
    message("    [endcheck][${TESTCASE_CHECK_COUNT}] passed")
  endif()
endmacro()

macro(check_log_equal description)
  check__common("${description}")
  check__info(0)
endmacro()

macro(check_log_not_equal description)
  check__common("${description}")
  check__info(1)
endmacro()

macro(check_result__impl description failing_condition)
  math(EXPR TESTCASE_CHECK_COUNT "0${TESTCASE_CHECK_COUNT} + 1")
  math(EXPR CHECK_COUNT "0${CHECK_COUNT} + 1")
  message("    [check][${TESTCASE_CHECK_COUNT}] ${description}")
  if("${CHECK_RESULT}" EQUAL "${failing_condition}")
    math(EXPR TESTCASE_CHECK_FAILED_COUNT "${TESTCASE_CHECK_FAILED_COUNT} + 1")
    math(EXPR CHECK_FAILED_COUNT "${CHECK_FAILED_COUNT} + 1")
    message("    [endcheck][${TESTCASE_CHECK_COUNT}] failed")
  else()
    math(EXPR TESTCASE_CHECK_PASSED_COUNT "${TESTCASE_CHECK_PASSED_COUNT} + 1")
    math(EXPR CHECK_PASSED_COUNT "${CHECK_PASSED_COUNT} + 1")
    message("    [endcheck][${TESTCASE_CHECK_COUNT}] passed")
  endif()
endmacro()

macro(check_result_equal description)
  check_result__impl("${description}" 0)
endmacro()

macro(check_result_not_equal description)
  check_result__impl("${description}" 1)
endmacro()

macro(save_log)
  file(REMOVE_RECURSE "${TESTCASE_BINARY_DIR}/${TESTCASE_CHECK_COUNT}")
  file(MAKE_DIRECTORY "${TESTCASE_BINARY_DIR}/${TESTCASE_CHECK_COUNT}")
  file(RENAME "${TESTCASE_BINARY_DIR}/expect.log" "${TESTCASE_BINARY_DIR}/${TESTCASE_CHECK_COUNT}/expect.log")
  file(RENAME "${TESTCASE_BINARY_DIR}/actual.log" "${TESTCASE_BINARY_DIR}/${TESTCASE_CHECK_COUNT}/actual.log")
endmacro()

macro(log_variables)
  foreach(var ${ARGN})
    message("${var}=${${var}}")
  endforeach()
endmacro()

#
# utilities
#

macro(set_if_not_defined var)
  if (NOT DEFINED ${var})
    set(${var} ${ARGN})
  endif()
endmacro()

function(is_begin_with var value)
  set(${var} 0 PARENT_SCOPE)
  foreach(prefix IN LISTS ARGN)
    string(LENGTH "${value}" value_len)
    string(LENGTH "${prefix}" prefix_len)
    if (prefix_len GREATER value_len)
      continue()
    endif()
    string(SUBSTRING "${value}" 0 ${prefix_len} substr)
    if (substr STREQUAL prefix)
      set(${var} 1 PARENT_SCOPE)
      return()
    endif()
  endforeach()
endfunction()

function(is_end_with var value)
  set(${var} 0 PARENT_SCOPE)
  foreach(suffix IN LISTS ARGN)
    string(LENGTH "${value}" value_len)
    string(LENGTH "${suffix}" suffix_len)
    if (suffix_len GREATER value_len)
      continue()
    endif()
    math(EXPR begin "${value_len} - ${suffix_len}")
    string(SUBSTRING "${value}" ${begin} ${suffix_len} substr)
    if (substr STREQUAL suffix)
      set(${var} 1 PARENT_SCOPE)
      return()
    endif()
  endforeach()
endfunction()

function(keep_if_begin_with out_list in_list)
  foreach(value IN LISTS in_list)
    is_begin_with(_ "${value}" ${ARGN})
    if (_)
      list(APPEND result "${value}")
    endif()
  endforeach()
  set(${out_list} "${result}" PARENT_SCOPE)
endfunction()

function(keep_if_end_with out_list in_list)
  foreach(value IN LISTS in_list)
    is_end_with(_ "${value}" ${ARGN})
    if (_)
      list(APPEND result "${value}")
    endif()
  endforeach()
  set(${out_list} "${result}" PARENT_SCOPE)
endfunction()

function(keep_if_matches)
endfunction()

function(remove_if_begin_with out_list in_list)
  foreach(value IN LISTS in_list)
    is_begin_with(_ "${value}" ${ARGN})
    if (NOT _)
      list(APPEND result "${value}")
    endif()
  endforeach()
  set(${out_list} "${result}" PARENT_SCOPE)
endfunction()

function(remove_if_end_with out_list in_list)
  foreach(value IN LISTS in_list)
    is_end_with(_ "${value}" ${ARGN})
    if (NOT _)
      list(APPEND result "${value}")
    endif()
  endforeach()
  set(${out_list} "${result}" PARENT_SCOPE)
endfunction()

function(remove_if_matches)
endfunction()

function(remove_if_is_directory out_list in_list)
  foreach(value IN LISTS in_list)
    if (NOT IS_DIRECTORY "${value}")
      list(APPEND result "${value}")
    endif()
  endforeach()
  set(${out_list} "${result}" PARENT_SCOPE)
endfunction()

include("${CMAKE_CURRENT_LIST_DIR}/utility.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/log.cmake")
